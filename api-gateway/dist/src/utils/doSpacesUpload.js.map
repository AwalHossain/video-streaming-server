{"version":3,"file":"doSpacesUpload.js","sourceRoot":"/","sources":["src/utils/doSpacesUpload.ts"],"names":[],"mappings":";;;;;AAAA,sDAA0B;AAE1B,uDAA+B;AAE/B,qDAAqD;AACrD,MAAM,EAAE,GAAG,IAAI,iBAAG,CAAC,EAAE,CAAC;IACpB,QAAQ,EAAE,gBAAM,CAAC,QAAQ,CAAC,QAAQ;IAClC,WAAW,EAAE,gBAAM,CAAC,QAAQ,CAAC,SAAS;IACtC,eAAe,EAAE,gBAAM,CAAC,QAAQ,CAAC,SAAS;IAC1C,MAAM,EAAE,gBAAM,CAAC,QAAQ,CAAC,MAAM;IAC9B,2CAA2C;IAC3C,gBAAgB,EAAE,IAAI;IACtB,gBAAgB,EAAE,IAAI;CACvB,CAAC,CAAC;AAEH;;GAEG;AACH,MAAM,oBAAoB,GAAG,KAAK,EAAE,OAA4B,EAAE,EAAE;IAClE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,aAAa,GAAG,IAAI,EAAE,GAAG,OAAO,CAAC;IAExE,2DAA2D;IAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC7B,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;IAC9D,MAAM,GAAG,GAAG,WAAW,MAAM,IAAI,SAAS,IAAI,aAAa,EAAE,CAAC;IAE9D,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE;QAC3C,MAAM;QACN,GAAG;QACH,WAAW;QACX,MAAM,EAAE,gBAAM,CAAC,QAAQ,CAAC,UAAU;KACnC,CAAC,CAAC;IAEH,oCAAoC;IACpC,MAAM,MAAM,GAAG;QACb,MAAM,EAAE,gBAAM,CAAC,QAAQ,CAAC,UAAU;QAClC,GAAG,EAAE,GAAG;QACR,OAAO,EAAE,aAAa;KACvB,CAAC;IAEF,IAAI,CAAC;QACH,0BAA0B;QAC1B,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE9D,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QAEpD,mEAAmE;QACnE,MAAM,OAAO,GAAG,WAAW,gBAAM,CAAC,QAAQ,CAAC,UAAU,IAAI,gBAAM,CAAC,QAAQ,CAAC,QAAQ,IAAI,GAAG,EAAE,CAAC;QAC3F,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;QACtC,OAAO;YACL,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,GAAG;YACZ,UAAU,EAAE,gBAAM,CAAC,QAAQ,CAAC,UAAU;YACtC,OAAO;YACP,QAAQ;YACR,YAAY,EAAE,oGAAoG;SACnH,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QACxD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,kBAAe;IACb,oBAAoB;CACrB,CAAC","sourcesContent":["import AWS from 'aws-sdk';\nimport { PresignedUrlOptions } from '../app/modules/video/video.interface';\nimport config from '../config';\n\n// Configure the Digital Ocean Spaces client properly\nconst s3 = new AWS.S3({\n  endpoint: config.doSpaces.endpoint,\n  accessKeyId: config.doSpaces.accessKey,\n  secretAccessKey: config.doSpaces.secretKey,\n  region: config.doSpaces.region,\n  // Force path style for more compatibility \n  s3ForcePathStyle: true,\n  signatureVersion: 'v4'\n});\n\n/**\n * Generates a presigned URL for client-side uploading to Digital Ocean Spaces\n */\nconst generatePresignedUrl = async (options: PresignedUrlOptions) => {\n  const { filename, contentType, userId, expirySeconds = 3600 } = options;\n  \n  // Generate a simpler key for the file (easier for testing)\n  const timestamp = Date.now();\n  const cleanFilename = filename.replace(/[^a-zA-Z0-9.]/g, '-');\n  const key = `uploads/${userId}/${timestamp}-${cleanFilename}`;\n  \n  console.log('Generating presigned URL for:', {\n    userId,\n    key,\n    contentType,\n    bucket: config.doSpaces.bucketName\n  });\n  \n  // Only include essential parameters\n  const params = {\n    Bucket: config.doSpaces.bucketName,\n    Key: key,\n    Expires: expirySeconds\n  };\n\n  try {\n    // Generate the signed URL\n    const url = await s3.getSignedUrlPromise('putObject', params);\n    \n    console.log('Successfully generated presigned URL');\n    \n    // Also generate a direct test link to verify the file after upload\n    const fileUrl = `https://${config.doSpaces.bucketName}.${config.doSpaces.endpoint}/${key}`;\n    const fileName = key.split('/').pop();\n    return {\n      uploadUrl: url,\n      fileKey: key,\n      bucketName: config.doSpaces.bucketName,\n      fileUrl,\n      fileName,\n      instructions: \"Upload using PUT request with exact URL. For Postman: Add Content-Type header and use binary body.\"\n    };\n  } catch (error) {\n    console.error('Error generating presigned URL:', error);\n    throw error;\n  }\n};\n\nexport default {\n  generatePresignedUrl\n};"]}