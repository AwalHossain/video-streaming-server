{"version":3,"file":"logger.js","sourceRoot":"/","sources":["src/shared/logger.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,gDAAwB;AACxB,qCAA2D;AAC3D,0FAAwD;AAExD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,gBAAM,CAAC;AAE/D,MAAM,iBAAiB,GAAG,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IACxE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,OAAO,GAAG,eAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,IAAI,eAAK,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;AACrI,CAAC,CAAC,CAAC;AACH,MAAM,mBAAmB,GAAG,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IAC1E,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,OAAO,GAAG,eAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,IAAI,eAAK,CAAC,SAAS,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,KAAK,OAAO,EAAE,CAAC;AACxI,CAAC,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IAC/D,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IAClC,OAAO,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,KAAK,KAAK,KAAK,OAAO,EAAE,CAAC;AACnG,CAAC,CAAC,CAAC;AACH,MAAM,MAAM,GAAG,IAAA,sBAAY,EAAC;IAC1B,KAAK,EAAE,MAAM;IACb,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,QAAQ,CAAC;IAC5E,WAAW,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;IACxC,UAAU,EAAE;QACV,IAAI,oBAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,iBAAiB,CAAC,EAAE,CAAC;QAC1E,IAAI,mCAAe,CAAC;YAClB,QAAQ,EAAE,cAAI,CAAC,IAAI,CACjB,OAAO,CAAC,GAAG,EAAE,EACb,MAAM,EACN,SAAS,EACT,WAAW,EACX,yBAAyB,CAC1B;YACD,WAAW,EAAE,eAAe;YAC5B,aAAa,EAAE,IAAI;YACnB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,KAAK;SAChB,CAAC;KACH;CACF,CAAC,CAAC;AA0BmB,wBAAM;AAxB5B,MAAM,WAAW,GAAG,IAAA,sBAAY,EAAC;IAC/B,KAAK,EAAE,OAAO;IACd,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,EAAE,QAAQ,CAAC;IAChE,WAAW,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE;IACxC,UAAU,EAAE;QACV,IAAI,oBAAU,CAAC,OAAO,CAAC;YACrB,MAAM,EAAE,OAAO,CAAC,QAAQ,EAAE,EAAE,mBAAmB,CAAC;SACjD,CAAC;QACF,IAAI,mCAAe,CAAC;YAClB,QAAQ,EAAE,cAAI,CAAC,IAAI,CACjB,OAAO,CAAC,GAAG,EAAE,EACb,MAAM,EACN,SAAS,EACT,QAAQ,EACR,uBAAuB,CACxB;YACD,WAAW,EAAE,eAAe;YAC5B,aAAa,EAAE,IAAI;YACnB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,KAAK;SAChB,CAAC;KACH;CACF,CAAC,CAAC;AAEM,kCAAW","sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\nimport { createLogger, format, transports } from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\n\nconst { combine, label, timestamp, printf, colorize } = format;\n\nconst infiConsoleFormat = printf(({ level, message, label, timestamp }) => {\n  const date = new Date(timestamp);\n  const hour = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return `${chalk.blue(`[${date.toDateString()} ${hour}:${minutes}:${seconds}]`)} ${chalk.green(`[${label}]`)} ${level}: ${message}`;\n});\nconst eorrorConsoleFormat = printf(({ level, message, label, timestamp }) => {\n  const date = new Date(timestamp);\n  const hour = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return `${chalk.red(`[${date.toDateString()} ${hour}:${minutes}:${seconds}]`)} ${chalk.redBright(`[${label}]`)} ${level}: ${message}`;\n});\n\nconst myFormat = printf(({ level, message, label, timestamp }) => {\n  const date = new Date(timestamp);\n  const hour = date.getHours();\n  const minutes = date.getMinutes();\n  const seconds = date.getSeconds();\n  return `[${date.toDateString()} ${hour}:${minutes}:${seconds} ] [${label}] ${level}: ${message}`;\n});\nconst logger = createLogger({\n  level: 'info',\n  format: combine(colorize(), label({ label: 'MERN' }), timestamp(), myFormat),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new transports.Console({ format: combine(colorize(), infiConsoleFormat) }),\n    new DailyRotateFile({\n      filename: path.join(\n        process.cwd(),\n        'logs',\n        'winston',\n        'successes',\n        'MERN-%DATE%-success.log',\n      ),\n      datePattern: 'YYYY-DD-MM-HH',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '14d',\n    }),\n  ],\n});\n\nconst errorLogger = createLogger({\n  level: 'error',\n  format: combine(label({ label: 'MERN' }), timestamp(), myFormat),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new transports.Console({\n      format: combine(colorize(), eorrorConsoleFormat),\n    }),\n    new DailyRotateFile({\n      filename: path.join(\n        process.cwd(),\n        'logs',\n        'winston',\n        'errors',\n        'MERN-%DATE%-error.log',\n      ),\n      datePattern: 'YYYY-DD-MM-HH',\n      zippedArchive: true,\n      maxSize: '20m',\n      maxFiles: '14d',\n    }),\n  ],\n});\n\nexport { errorLogger, logger };\n"]}