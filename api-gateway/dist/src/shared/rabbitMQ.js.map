{"version":3,"file":"rabbitMQ.js","sourceRoot":"/","sources":["src/shared/rabbitMQ.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport client, { Channel, Connection, Message } from 'amqplib';\nimport { errorLogger, logger } from './logger';\n\ninterface Options {\n  expiration?: string;\n  persistent?: boolean;\n  priority?: number;\n  correlationId?: string;\n  replyTo?: string;\n  // Add more properties as needed\n}\n\nclass RabbitMQConnection {\n  connection!: Connection;\n  channel!: Channel;\n  private connected!: boolean;\n  private reconnecting: boolean = false;\n\n  async connect(): Promise<void> {\n    if (this.connected && this.channel) return;\n    if (this.reconnecting) return; // Prevent multiple reconnection attempts\n\n    try {\n      this.reconnecting = true;\n      logger.info('⏳Connecting to RabbitMQ');\n      this.connection = await client.connect(process.env.RABBITMQ_URL);\n\n      this.connection.on('error', (error) => {\n        if (!this.reconnecting) {\n          errorLogger.error('RabbitMQ connection error', error);\n          // Try to reconnect\n          setTimeout(() => this.connect(), 3000);\n        }\n      });\n\n      this.connection.on('close', () => {\n        this.connected = false;\n        if (!this.reconnecting) {\n          logger.info('RabbitMQ connection closed');\n          // Try to reconnect\n          setTimeout(() => this.connect(), 3000);\n        }\n      });\n\n      logger.info(`✅ RabbitMQ connected successfully`);\n\n      this.channel = await this.connection.createChannel();\n\n      logger.info(`🛸 RabbitMQ channel created successfully`);\n      this.connected = true;\n      this.reconnecting = false; // Reset reconnecting flag\n    } catch (error) {\n      this.reconnecting = false; // Reset the flag if an error occurs\n      errorLogger.error('Error connecting to RabbitMQ', error);\n      throw error; // Re-throw the error\n    }\n  }\n\n  // Send message to queue\n  async sendToQueue(queue: string, message: any, options?: Options) {\n    try {\n      if (!this.channel) {\n        await this.connect();\n      }\n\n      this.channel.assertQueue(queue, {\n        durable: false,\n      });\n\n      this.channel.sendToQueue(\n        queue,\n        Buffer.from(JSON.stringify(message)),\n        options,\n      );\n    } catch (error) {\n      errorLogger.error('Error sending message to queue', error);\n      throw error; // Re-throw the error\n    }\n  }\n\n  // Consume message from queue\n\n  async consume(\n    queue: string,\n    callback: (message: Message, ack: () => void) => void,\n  ) {\n    try {\n      if (!this.channel) {\n        await this.connect();\n      }\n\n      this.channel.assertQueue(queue, {\n        durable: false,\n      });\n\n      this.channel.consume(queue, (message) => {\n        if (message) {\n          const ack = () => this.channel.ack(message);\n          callback(message, ack);\n        }\n      });\n    } catch (error) {\n      errorLogger.error('Error consuming message from queue', error);\n      throw error; // Re-throw the error\n    }\n  }\n}\n\nconst RabbitMQ = new RabbitMQConnection();\n\nexport default RabbitMQ;\n"]}