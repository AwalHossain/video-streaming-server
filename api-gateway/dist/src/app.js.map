{"version":3,"file":"app.js","sourceRoot":"/","sources":["src/app.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from '@sentry/node';\nimport cors from 'cors';\nimport dotenv from 'dotenv';\nimport express, { Express, NextFunction, Request, Response } from 'express';\n// import globalErrorHandler from \"./app/middleware/globalErrorhandler\";\n// import router from './app/routes/index';\nimport globalErrorHandler from './app/middleware/globalErrorHandler';\nimport router from './app/routes';\n\nimport { errorLogger } from './shared/logger';\ndotenv.config();\n\nconst app: Express = express();\n\n// Sentry.init({\n//   dsn: config.sentry.dsn,\n//   environment: 'devlopment',\n//   integrations: [\n//     // enable HTTP calls tracing\n//     new Sentry.Integrations.Http({ tracing: true }),\n//     // enable Express.js middleware tracing\n//     new Sentry.Integrations.Express({ app }),\n//     new ProfilingIntegration(),\n//   ],\n//   // Performance Monitoring\n//   tracesSampleRate: 1.0, //  Capture 100% of the transactions\n//   // Set sampling rate for profiling - this is relative to tracesSampleRate\n//   profilesSampleRate: 1.0,\n\n//   tracePropagationTargets: ['all'],\n// });\n\n// The request handler must be the first middleware on the app\napp.use(Sentry.Handlers.requestHandler());\n\n// TracingHandler creates a trace for every incoming request\napp.use(Sentry.Handlers.tracingHandler());\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(\n  cors({\n    origin: [process.env.CLIENT_URL1!, process.env.CLIENT_URL2!],\n    credentials: true,\n  }),\n);\n\napp.get('/test', (req: Request, res: Response) => {\n  res.send('Hello World!');\n});\n\napp.get('/debug-sentry', function mainHandler() {\n  throw new Error('My first Sentry error!');\n});\n\napp.use(`/api/v1`, router);\n\napp.get('/health', (req: Request, res: Response) => {\n  res.status(200).json({\n    success: true,\n    message: 'API Gateway is running',\n  });\n});\n\napp.use(globalErrorHandler);\n\n// The error handler must be registered before any other error middleware and after all controllers\napp.use(Sentry.Handlers.errorHandler());\n\nprocess.on('unhandledRejection', (error) => {\n  Sentry.captureException(error);\n  errorLogger.error('Unhandled Rejection at:', error);\n\n  Sentry.flush(2000).then(() => {\n    process.exit(1);\n  });\n});\n\nprocess.on('uncaughtException', (error) => {\n  Sentry.captureException(error);\n  errorLogger.error('There was an uncaught error', error);\n\n  Sentry.flush(2000).then(() => {\n    process.exit(1);\n  });\n});\n\n//handle not found\napp.use((req: Request, res: Response, next: NextFunction) => {\n  res.status(404).json({\n    success: false,\n    message: 'Not Found',\n    errorMessages: [\n      {\n        path: req.originalUrl,\n        message: 'API Not Found',\n      },\n    ],\n  });\n  next();\n});\n\nexport default app;\n"]}