{"version":3,"file":"index.js","sourceRoot":"/","sources":["src/socket/index.ts"],"names":[],"mappings":";;;;;;AACA,gDAAoD;AACpD,sCAA+B;AAC/B,6CAA0C;AAC1C,kEAA0C;AAEnC,MAAM,sBAAsB,GAAG,KAAK,IAAI,EAAE;IAC/C,yDAAyD;IACzD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,sBAAa,CAAC,EAAE,CAAC;QACjD,kBAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,OAAgB,EAAE,GAAG,EAAE,EAAE;YAChD,IAAI,CAAC;gBACH,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC7D,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;gBAE5C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,aAAa,CAAC;gBAC1C,eAAM,CAAC,IAAI,CAAC,kBAAkB,KAAK,YAAY,MAAM,EAAE,CAAC,CAAC;gBACzD,WAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAChC,GAAG,EAAE,CAAC;YACR,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,eAAM,CAAC,KAAK,CAAC,uCAAuC,KAAK,GAAG,EAAE,KAAK,CAAC,CAAC;YACvE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC;AAjBW,QAAA,sBAAsB,0BAiBjC","sourcesContent":["import { Message } from 'amqplib';\nimport { NOTIFY_EVENTS } from '../constants/notify';\nimport { io } from '../server';\nimport { logger } from '../shared/logger';\nimport RabbitMQ from '../shared/rabbitMQ';\n\nexport const setupRabbitMQConsumers = async () => {\n  // Listen for all events from the Video Conversion Server\n  for (const event of Object.values(NOTIFY_EVENTS)) {\n    RabbitMQ.consume(event, (message: Message, ack) => {\n      try {\n        const parsedMessage = JSON.parse(message.content.toString());\n        console.log('checking data', parsedMessage);\n\n        const { userId, ...data } = parsedMessage;\n        logger.info(`Emitting event ${event} to user ${userId}`);\n        io.to(userId).emit(event, data);\n        ack();\n      } catch (error) {\n        logger.error(`Failed to process message for event ${event}:`, error);\n      }\n    });\n  }\n};\n"]}