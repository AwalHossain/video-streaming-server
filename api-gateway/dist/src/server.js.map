{"version":3,"file":"server.js","sourceRoot":"/","sources":["src/server.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AACxB,yCAAmC;AACnC,gDAAwB;AACxB,sDAA8B;AAC9B,4CAAsD;AACtD,iEAAyC;AACzC,qCAAkD;AAElD,MAAM,IAAI,GAAW,gBAAM,CAAC,IAAI,IAAI,IAAI,CAAC;AAEzC,MAAM,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,aAAG,CAAC,CAAC;AAEzB,QAAA,EAAE,GAAG,IAAI,kBAAM,CAAC,MAAM,EAAE;IACnC,IAAI,EAAE;QACJ,MAAM,EAAE,GAAG;QACX,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;KACzB;CACF,CAAC,CAAC;AAEH,UAAE,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAM,EAAE,EAAE;IAC7B,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC;IAE7C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpB,OAAO,CAAC,GAAG,CAAC,QAAQ,MAAM,YAAY,CAAC,CAAC;IAExC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;QAC3B,eAAM,CAAC,IAAI,CAAC,QAAQ,MAAM,eAAe,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,KAAK,UAAU,SAAS;IACtB,IAAI,CAAC;QACH,MAAM,kBAAQ,CAAC,OAAO,EAAE,CAAC;QACzB,MAAM,IAAA,+BAAsB,GAAE,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YAC7B,eAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;YACzC,eAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,gCAAgC;QAChC,qCAAqC;QACrC,kBAAkB;QAClB,sBAAsB;QACtB,MAAM;QACN,MAAM;IACR,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,oBAAW,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IACzD,CAAC;AACH,CAAC;AAED,SAAS,EAAE,CAAC","sourcesContent":["import http from 'http';\nimport { Server } from 'socket.io';\nimport app from './app';\nimport config from './config';\nimport { errorLogger, logger } from './shared/logger';\nimport RabbitMQ from './shared/rabbitMQ';\nimport { setupRabbitMQConsumers } from './socket';\n\nconst PORT: number = config.port || 8000;\n\nconst server = http.createServer(app);\n\nexport const io = new Server(server, {\n  cors: {\n    origin: '*',\n    methods: ['GET', 'POST'],\n  },\n});\n\nio.on('connection', (socket) => {\n  const userId = socket.handshake.query.userId;\n\n  socket.join(userId);\n  console.log(`User ${userId} connected`);\n\n  socket.on('disconnect', () => {\n    logger.info(`User ${userId} disconnected`);\n  });\n});\n\nasync function bootstrap() {\n  try {\n    await RabbitMQ.connect();\n    await setupRabbitMQConsumers();\n    server.listen(PORT, async () => {\n      logger.info(`listening on port ${PORT}`);\n      logger.info('application started');\n    });\n\n    // process.on('SIGTERM', () => {\n    //   logger.info('SIGTERM received');\n    //   if (server) {\n    //     server.close();\n    //   }\n    // });\n  } catch (error) {\n    errorLogger.error('Error connecting to Server', error);\n  }\n}\n\nbootstrap();\n"]}