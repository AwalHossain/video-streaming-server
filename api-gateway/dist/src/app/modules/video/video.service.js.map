{"version":3,"file":"video.service.js","sourceRoot":"/","sources":["src/app/modules/video/video.service.ts"],"names":[],"mappings":";;;;;;AACA,wEAAgD;AAEhD,iDAAmD;AAEnD,MAAM,YAAY,GAAG,KAAK,EAAE,GAAY,EAAE,EAAE;IAC1C,MAAM,MAAM,GAAqB,MAAM,kBAAU,CAAC,GAAG,CAAC,SAAS,EAAE;QAC/D,MAAM,EAAE,GAAG,CAAC,KAAK;QACjB,OAAO,EAAE;YACP,aAAa,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa;SACzC;KACF,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAE9B,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG;QAC3B,MAAM,IAAI,kBAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;IAEpD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,KAAK,EAAE,GAAY,EAAE,EAAE;IACzC,MAAM,MAAM,GAAqB,MAAM,kBAAU,CAAC,GAAG,CAAC,iBAAiB,EAAE;QACvE,MAAM,EAAE,GAAG,CAAC,KAAK;QACjB,OAAO,EAAE;YACP,aAAa,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa;SACzC;KACF,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAE9B,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG;QAC3B,MAAM,IAAI,kBAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;IAEpD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,KAAK,EAAE,GAAY,EAAE,EAAE;IACzC,MAAM,MAAM,GAAqB,MAAM,kBAAU,CAAC,GAAG,CACnD,iBAAiB,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,EAChC,GAAG,CAAC,IAAI,EACR;QACE,OAAO,EAAE;YACP,aAAa,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa;SACzC;KACF,CACF,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAE9B,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG;QAC3B,MAAM,IAAI,kBAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;IAEpD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,KAAK,EAAE,GAAY,EAAE,EAAE;IAC1C,MAAM,MAAM,GAAqB,MAAM,kBAAU,CAAC,GAAG,CACnD,UAAU,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,EACzB;QACE,OAAO,EAAE;YACP,aAAa,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa;SACzC;KACF,CACF,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAE9B,IAAI,MAAM,CAAC,UAAU,KAAK,GAAG;QAC3B,MAAM,IAAI,kBAAQ,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;IAEnD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEW,QAAA,YAAY,GAAG;IAC1B,YAAY;IACZ,WAAW;IACX,WAAW;IACX,YAAY;CACb,CAAC","sourcesContent":["import { Request } from 'express';\nimport ApiError from '../../../errors/apiError';\nimport { IGenericResponse } from '../../../interface/common';\nimport { apiService } from '../../../shared/axios';\n\nconst getAllVideos = async (req: Request) => {\n  const result: IGenericResponse = await apiService.get('/videos', {\n    params: req.query,\n    headers: {\n      Authorization: req.headers.authorization,\n    },\n  });\n\n  console.log('result', result);\n\n  if (result.statusCode !== 200)\n    throw new ApiError(500, 'Failed to fetch videos');\n\n  return result;\n};\n\nconst getMyVideos = async (req: Request) => {\n  const result: IGenericResponse = await apiService.get('videos/myvideos', {\n    params: req.query,\n    headers: {\n      Authorization: req.headers.authorization,\n    },\n  });\n\n  console.log('result', result);\n\n  if (result.statusCode !== 200)\n    throw new ApiError(500, 'Failed to fetch videos');\n\n  return result;\n};\n\nconst updateVideo = async (req: Request) => {\n  const result: IGenericResponse = await apiService.put(\n    `videos/update/${req.params.id}`,\n    req.body,\n    {\n      headers: {\n        Authorization: req.headers.authorization,\n      },\n    },\n  );\n\n  console.log('result', result);\n\n  if (result.statusCode !== 200)\n    throw new ApiError(500, 'Failed to update video');\n\n  return result;\n};\n\nconst getVideoById = async (req: Request) => {\n  const result: IGenericResponse = await apiService.get(\n    `videos/${req.params.id}`,\n    {\n      headers: {\n        Authorization: req.headers.authorization,\n      },\n    },\n  );\n\n  console.log('result', result);\n\n  if (result.statusCode !== 200)\n    throw new ApiError(500, 'Failed to fetch video');\n\n  return result;\n};\n\nexport const VideoService = {\n  getAllVideos,\n  getMyVideos,\n  updateVideo,\n  getVideoById,\n};\n"]}