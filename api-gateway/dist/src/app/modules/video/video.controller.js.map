{"version":3,"file":"video.controller.js","sourceRoot":"/","sources":["src/app/modules/video/video.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  API_SERVER_EVENTS,\n  VIDEO_CONVERSION_SERVER,\n} from '../../../constants/event';\nimport { NOTIFY_EVENTS } from '../../../constants/notify';\nimport catchAsync from '../../../shared/catchAsyncError';\nimport RabbitMQ from '../../../shared/rabbitMQ';\nimport sendResponse from '../../../shared/response';\nimport doSpacesUpload from '../../../utils/doSpacesUpload';\nimport broadcastVideoEvent from './video.event';\nimport { VideoService } from './video.service';\n\n// get presigned URL for direct upload to digital ocean spaces\nconst getPresignedUrl = catchAsync(async (req: Request, res: Response) => {\n\n  const { filename, contentType } = req.body;\n    \n  if (!filename || !contentType) {\n    return res.status(400).json({\n      status: 'fail',\n      message: 'Filename and contentType are required',\n    });\n  }\n\n  const userId = req.user.id;\n    \n  // Generate clean filename\n  const cleanFilename = filename\n    .split('.')[0]\n    .replace(/\\s+/g, '-')\n    .replace(/\\(.*?\\)/g, '')\n    .replace(/\\[.*?\\]/g, '') + '-' + uuidv4() + '.' + filename.split('.').pop();\n  \n    const result = await doSpacesUpload.generatePresignedUrl({\n        filename: cleanFilename,\n        contentType: contentType,\n        userId: userId,\n        expirySeconds: 3600,\n    });\n\n    sendResponse(res, {\n        statusCode: 200,\n        success: true,\n        message: 'Presigned URL generated successfully',\n        data: result,\n    });\n\n})\n\n// Define confirm upload function after getPresignedUrl\nconst confirmUpload = catchAsync(async (req: Request, res: Response) => {\n  const { fileKey, originalName, fileName, bucketName } = req.body;\n    \n  if (!fileKey || !fileName) {\n    return res.status(400).json({\n      status: 'fail',\n      message: 'File information is required',\n    });\n  }\n\n  const userId = req.user.id;\n  // console.log(\"userId\", userId);\n\n  // Notify that video is being processed\n  RabbitMQ.sendToQueue(NOTIFY_EVENTS.NOTIFT_VIDEO_UPLOADING_BUCKET, {\n    userId,\n    status: 'completed',\n    name: 'Video Upload Complete',\n    fileName: originalName,\n    message: 'Video has been uploaded successfully and is being processed',\n  });\n\n  const payload = {\n    originalName,\n    recordingDate: Date.now(),\n    duration: '0:00',\n    visibility: 'Public',\n    author: userId,\n    fileName,\n    title: originalName.split('.')[0].replace(/[_]/g, ''),\n  };\n\n  // Broadcast event to api-server to insert video metadata\n  broadcastVideoEvent(API_SERVER_EVENTS.INSERT_VIDEO_METADATA_EVENT, payload);\n\n  // Send video-conversion server necessary data\n  const data = {\n    userId,\n    fileName,\n    bucketName,\n    fileKey,\n  };\n\n  // Broadcast event to video-conversion server\n  broadcastVideoEvent(\n    VIDEO_CONVERSION_SERVER.SEND_VIDEO_METADATA_EVENT,\n    data,\n  );\n\n  sendResponse(res, {\n    statusCode: 200,\n    success: true,\n    message: 'Video processing started',\n    data: {\n      payload,\n      processingInfo: data,\n    },\n  });\n});\n\n// const uploadToBucket = async (\n//   req: Request,\n//   res: Response,\n//   next: NextFunction,\n// ) => {\n//   try {\n//     RabbitMQ.sendToQueue(NOTIFY_EVENTS.NOTIFT_VIDEO_UPLOADING_BUCKET, {\n//       userId: req.user.id,\n//       status: 'processing',\n//       name: 'Video Uploading to bucket',\n//       fileName: req?.file?.originalname,\n//       message: 'Video is uploading to bucket',\n//     });\n\n//     // Check if file is present\n//     const file = req?.file;\n//     // Rename file to remove spaces and add timestamp\n//     file.filename =\n//       file.originalname\n//         .split('.')[0]\n//         .replace(/\\s+/g, '-')\n//         .replace(/\\(.*?\\)/g, '')\n//         .replace(/\\[.*?\\]/g, '') + uuidv4();\n\n//     const userId = req.user.id;\n//     if (!file) {\n//       return res.status(400).json({\n//         status: 'fail',\n//         message: 'No file uploaded',\n//       });\n//     }\n\n//     // azure container name\n//     const containerName = `upload-container-${uuidv4()}`;\n//     // call azureUpload function to upload file to azure\n//     const response = await azureUpload(file, containerName);\n//     console.log('response', response);\n\n//     const payload = {\n//       originalName: file.originalname,\n//       recordingDate: Date.now(),\n//       duration: '0:00',\n//       visibility: 'Public',\n//       author: userId,\n//       fileName: file.filename,\n//       title: file.originalname.split('.')[0].replace(/[_]/g, ''),\n//     };\n\n//     // broadcast event to api-server to insert video metadata\n//     broadcastVideoEvent(API_SERVER_EVENTS.INSERT_VIDEO_METADATA_EVENT, payload);\n\n//     //   send video-conversion server necessary data\n//     const data = {\n//       userId,\n//       fileName: file.filename,\n//       containerName: containerName,\n//     };\n\n//     // broadcase event to video-conversion server\n//     broadcastVideoEvent(\n//       VIDEO_CONVERSION_SERVER.SEND_VIDEO_METADATA_EVENT,\n//       data,\n//     );\n\n//     res.status(200).json({\n//       status: 'success',\n//       message: 'File uploaded successfully',\n//       payload,\n//       data,\n//     });\n\n//     RabbitMQ.sendToQueue(NOTIFY_EVENTS.NOTIFT_VIDEO_UPLOADING_BUCKET, {\n//       userId: req.user.id,\n//       status: 'completed',\n//       name: 'Video Uploading to bucket',\n//       fileName: req?.file?.originalname,\n//       message: 'Video is uploaded to bucket',\n//     });\n//   } catch (err) {\n//     next(err);\n//   }\n// };\n\nconst getAllVideos = async (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => {\n  try {\n    const result = await VideoService.getAllVideos(req);\n\n    sendResponse(res, result);\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst getMyVideos = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const result = await VideoService.getMyVideos(req);\n\n    sendResponse(res, result);\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst updateVideo = async (req: Request, res: Response, next: NextFunction) => {\n  try {\n    const result = await VideoService.updateVideo(req);\n\n    sendResponse(res, result);\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst getVideoById = async (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => {\n  try {\n    const result = await VideoService.getVideoById(req);\n\n    sendResponse(res, result);\n  } catch (err) {\n    next(err);\n  }\n};\n\nexport const VideoController = {\n\n  getAllVideos,\n  getMyVideos,\n  updateVideo,\n  getVideoById,\n  getPresignedUrl,\n  confirmUpload,\n};\n"]}